# bot_handlers.py

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler
from analytics import calculate_portfolio
from recommendation import recommend_investment
from charts import generate_portfolio_chart
from database import add_transaction
from utils import main_menu_keyboard, back_to_main_menu

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
SELECT_TYPE, ENTER_COIN, ENTER_AMOUNT_OR_VALUE, ENTER_PRICE, ENTER_EXCHANGE = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    from database import add_user
    add_user(user_id)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoKeeper!", reply_markup=main_menu_keyboard())


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "portfolio":
        data = calculate_portfolio(user_id)
        text = "üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n\n"
        for asset in data['assets']:
            text += f"{asset['symbol']} ({asset['amount']:.4f})\n"
            text += f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${asset['avg_price']:.2f}\n"
            text += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${asset['current_price']:.2f}\n"
            text += f"–í–ª–æ–∂–µ–Ω–æ: ${asset['invested']:.2f}\n"
            text += f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${asset['current']:.2f}\n"
            profit_str = "+" if asset['profit'] >= 0 else "-"
            text += f"–ü—Ä–∏–±—ã–ª—å: {profit_str}${abs(asset['profit']):.2f} ({asset['roi']:+.2f}%)\n\n"

        text += "üìä –ò–¢–û–ì–û:\n"
        text += f"–í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ: ${data['total']['invested']:.2f}\n"
        text += f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${data['total']['current']:.2f}\n"
        profit_str = "+" if data['total']['profit'] >= 0 else "-"
        text += f"–ü—Ä–∏–±—ã–ª—å: {profit_str}${abs(data['total']['profit']):.2f} ({data['total']['roi']:+.2f}%)\n\n"

        await query.edit_message_text(text=text, reply_markup=main_menu_keyboard())

    elif query.data == "analytics":
        data = calculate_portfolio(user_id)
        text = "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:\n\n"
        text += f"–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {data['total']['roi']:+.2f}%\n"
        text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤: {len(data['assets'])}\n"
        top_asset = max(data['assets'], key=lambda x: x['profit']) if data['assets'] else None
        top_name = top_asset['symbol'] if top_asset else '‚Äî'
        text += f"–°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤: {top_name}\n"
        await query.edit_message_text(text=text, reply_markup=main_menu_keyboard())

    elif query.data == "recommend":
        recommendations = recommend_investment(amount=100, desired_profit=10, days=7)
        text = "üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
        for rec in recommendations:
            text += f"üî∏ {rec['name']} ({rec['symbol']})\n"
            text += f"–ü—Ä–æ–≥–Ω–æ–∑: {rec['forecast']}\n"
            text += f"–†–∏—Å–∫: {rec['risk']}\n\n"
        text += "‚ö†Ô∏è –≠—Ç–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–∏–±—ã–ª–∏. –ö—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫ –≤–æ–ª–∞—Ç–∏–ª–µ–Ω!"
        await query.edit_message_text(text=text, reply_markup=main_menu_keyboard())

    elif query.data == "add_transaction":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üõí –ü–æ–∫—É–ø–∫–∞", callback_data="type_buy")],
            [InlineKeyboardButton("üîª –ü—Ä–æ–¥–∞–∂–∞", callback_data="type_sell")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=keyboard)
        return SELECT_TYPE

    elif query.data == "chart":
        data = calculate_portfolio(user_id)
        chart_img = generate_portfolio_chart(data)
        await query.message.reply_photo(photo=chart_img, caption="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        await query.message.delete()
        await query.answer()
        return ConversationHandler.END

    elif query.data == "back_to_main":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
        return ConversationHandler.END

    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", reply_markup=main_menu_keyboard())
        return ConversationHandler.END


# === –§–û–†–ú–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –°–î–ï–õ–ö–ò ===

async def handle_add_transaction_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    transaction_type = "buy" if query.data == "type_buy" else "sell"
    context.user_data['transaction_type'] = transaction_type
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC –∏–ª–∏ Bitcoin):")
    return ENTER_COIN


async def handle_coin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    coin_input = update.message.text.strip()
    from crypto_api import search_coin
    coin = search_coin(coin_input)
    if not coin:
        await update.message.reply_text("–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ENTER_COIN
    context.user_data['coin_name'] = coin['name']
    context.user_data['symbol'] = coin['symbol']
    await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {coin['name']} ({coin['symbol'].upper()})\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Å—É–º–º—É:")
    return ENTER_AMOUNT_OR_VALUE


async def handle_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount_or_value = update.message.text.strip().replace(',', '.')
    try:
        amount_or_value = float(amount_or_value)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ENTER_AMOUNT_OR_VALUE

    context.user_data['amount_or_value'] = amount_or_value
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏ –∑–∞ 1 –º–æ–Ω–µ—Ç—É:")
    return ENTER_PRICE


async def handle_price_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    price = update.message.text.strip().replace(',', '.')
    try:
        price = float(price)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ENTER_PRICE

    context.user_data['price'] = price
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_exchange")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±–∏—Ä–∂—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", reply_markup=keyboard)
    return ENTER_EXCHANGE


async def handle_exchange_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    exchange = update.message.text.strip()
    context.user_data['exchange'] = exchange
    return await confirm_and_save(update, context)


async def skip_exchange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['exchange'] = None
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    return await confirm_and_save(update, context)


async def confirm_and_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    t = context.user_data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É
    if t['transaction_type'] == 'buy':
        amount = t['amount_or_value']
        value = amount * t['price']
    else:
        value = t['amount_or_value']
        amount = value / t['price']

    text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n\n"
    text += f"–¢–∏–ø: {'–ü–æ–∫—É–ø–∫–∞' if t['transaction_type'] == 'buy' else '–ü—Ä–æ–¥–∞–∂–∞'}\n"
    text += f"–ú–æ–Ω–µ—Ç–∞: {t['coin_name']} ({t['symbol'].upper()})\n"
    text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount:.6f}\n"
    text += f"–¶–µ–Ω–∞: ${t['price']:.2f}\n"
    text += f"–°—É–º–º–∞: ${value:.2f}\n"
    text += f"–ë–∏—Ä–∂–∞: {t['exchange'] or '‚Äî'}\n\n"
    text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é?"

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")]
    ])

    if update.message:
        await update.message.reply_text(text, reply_markup=keyboard)
    else:
        await update.callback_query.message.reply_text(text, reply_markup=keyboard)
    return ConversationHandler.END


async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    t = context.user_data

    if query.data == "confirm_yes":
        add_transaction(
            user_id=user_id,
            coin_name=t['coin_name'],
            symbol=t['symbol'],
            amount=context.user_data['amount_or_value'],
            price=context.user_data['price'],
            transaction_type=context.user_data['transaction_type'],
            exchange=context.user_data.get('exchange')
        )
        await query.edit_message_text("‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu_keyboard())
    else:
        await query.edit_message_text("‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END