# notifications.py

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import time
from telegram import Bot
import logging
from analytics import calculate_portfolio
from charts import generate_portfolio_chart
from database import get_all_users, get_user_notifications, toggle_daily_notification, toggle_weekly_notification

logging.basicConfig(level=logging.INFO)

bot = Bot("YOUR_BOT_TOKEN")  # –ó–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ config.BOT_TOKEN
scheduler = AsyncIOScheduler()

# === –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ ===

def init_scheduler():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á."""
    scheduler.start()

    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ 9:00
    scheduler.add_job(
        send_daily_report_to_all,
        'cron',
        hour=9,
        minute=0,
        id='daily_report',
        replace_existing=True
    )

    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 9:00
    scheduler.add_job(
        send_weekly_report_to_all,
        'cron',
        day_of_week='mon',
        hour=9,
        minute=0,
        id='weekly_report',
        replace_existing=True
    )


async def send_daily_report(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è."""
    try:
        data = calculate_portfolio(user_id)
        if not data['assets']:
            return  # –ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

        text = "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç:\n\n"
        text += f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${data['total']['current']:.2f}\n"
        profit_str = "+" if data['total']['profit'] >= 0 else "-"
        text += f"–ü—Ä–∏–±—ã–ª—å: {profit_str}${abs(data['total']['profit']):.2f} ({data['total']['roi']:+.2f}%)\n"

        chart_img = generate_portfolio_chart(data)
        await bot.send_photo(chat_id=user_id, photo=chart_img, caption=text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –¥–ª—è {user_id}: {e}")


async def send_weekly_report(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è."""
    try:
        data = calculate_portfolio(user_id)
        if not data['assets']:
            return  # –ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

        text = "üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:\n\n"
        text += f"–í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ: ${data['total']['invested']:.2f}\n"
        text += f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${data['total']['current']:.2f}\n"
        profit_str = "+" if data['total']['profit'] >= 0 else "-"
        text += f"–ü—Ä–∏–±—ã–ª—å: {profit_str}${abs(data['total']['profit']):.2f} ({data['total']['roi']:+.2f}%)\n\n"
        text += "–°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤:\n"
        top_asset = max(data['assets'], key=lambda x: x['profit']) if data['assets'] else None
        if top_asset:
            text += f"{top_asset['symbol']} (+${top_asset['profit']:.2f})"

        chart_img = generate_portfolio_chart(data)
        await bot.send_photo(chat_id=user_id, photo=chart_img, caption=text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –¥–ª—è {user_id}: {e}")


async def send_daily_report_to_all():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤—Å–µ–º, –∫—Ç–æ –µ–≥–æ –≤–∫–ª—é—á–∏–ª."""
    for user_id in get_all_users():
        if get_user_notifications(user_id)[0]:  # daily_report enabled
            await send_daily_report(user_id)


async def send_weekly_report_to_all():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤—Å–µ–º, –∫—Ç–æ –µ–≥–æ –≤–∫–ª—é—á–∏–ª."""
    for user_id in get_all_users():
        if get_user_notifications(user_id)[1]:  # weekly_report enabled
            await send_weekly_report(user_id)


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def toggle_daily_notification(user_id):
    """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç."""
    from database import toggle_daily_notification as db_toggle
    return db_toggle(user_id)


def toggle_weekly_notification(user_id):
    """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç."""
    from database import toggle_weekly_notification as db_toggle
    return db_toggle(user_id)


def get_user_notifications(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from database import get_user_notifications as db_get
    return db_get(user_id)